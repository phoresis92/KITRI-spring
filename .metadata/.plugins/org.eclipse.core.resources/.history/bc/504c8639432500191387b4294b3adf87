package com.kitri.test.product;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

@Controller
public class ProductController {

	@Resource(name="service")
	private Service service;
	
	@RequestMapping(value="/product/add",  method=RequestMethod.GET)
	public String addG() {
		return "/product/add";
	}
	
	@RequestMapping(value="/product/add",  method=RequestMethod.POST)
	public String addP(Product p) {
		System.out.println(p);
		
		String img_path = "C:\\Users\\hushe\\Desktop\\SPRING\\.metadata\\.plugins\\org.eclipse.wst.server.core\\tmp0\\webapps\\img\\";

		
		
		if(!p.getFile1().getOriginalFilename().equals("")) {
			System.out.println("file1");
			String fileName = p.getFile1().getOriginalFilename();
			String path = img_path + fileName;
			File f = new File(path);// 업로드된 파일을 복사할 파일 생성
			// c:/img 폴더에 동일한 이름으로 파일 생성
			try {
				p.getFile1().transferTo(f);
			}catch(IllegalStateException e) {
				e.printStackTrace();
			}catch(IOException e) {
				e.printStackTrace();
			}
			
			p.setImg1("/img/"+fileName);
			
		}
		if(!p.getFile2().getOriginalFilename().equals("")) {
			System.out.println("file2");
			String fileName = p.getFile2().getOriginalFilename();
			String path = img_path + fileName;
			File f = new File(path);// 업로드된 파일을 복사할 파일 생성
			// c:/img 폴더에 동일한 이름으로 파일 생성
			try {
				p.getFile2().transferTo(f);
			}catch(IllegalStateException e) {
				e.printStackTrace();
			}catch(IOException e) {
				e.printStackTrace();
			}
			
			p.setImg2("/img/"+fileName);
			
		}
		if(!p.getFile3().getOriginalFilename().equals("")) {
			
			System.out.println("file3");
			String fileName = p.getFile3().getOriginalFilename();
			String path = img_path + fileName;
			File f = new File(path);// 업로드된 파일을 복사할 파일 생성
			// c:/img 폴더에 동일한 이름으로 파일 생성
			try {
				p.getFile3().transferTo(f);
			}catch(IllegalStateException e) {
				e.printStackTrace();
			}catch(IOException e) {
				e.printStackTrace();
			}
			
			p.setImg3("/img/"+fileName);
			
		}
		if(!p.getFile4().getOriginalFilename().equals("")) {

			System.out.println("file4");
			String fileName = p.getFile4().getOriginalFilename();
			String path = img_path + fileName;
			File f = new File(path);// 업로드된 파일을 복사할 파일 생성
			// c:/img 폴더에 동일한 이름으로 파일 생성
			try {
				p.getFile4().transferTo(f);
			}catch(IllegalStateException e) {
				e.printStackTrace();
			}catch(IOException e) {
				e.printStackTrace();
			}
			
			p.setImg4("/img/"+fileName);
			
		}
		int num = service.getSeq();
		p.setNum(num);
		System.out.println("result p : "+p);
		service.addProd(p);
		
		return "redirect:/";
	}
	
	
	@RequestMapping(value="/product/list",  method=RequestMethod.GET)
	public String list(Model model) {
		
		ArrayList<Product> list = service.getAll();
		
		model.addAttribute("list",list);
		
		return "/product/list";
	}
	
	@RequestMapping(value="/product/myList",  method=RequestMethod.GET)
	public String myList(Model model, HttpServletRequest req) {
		
		HttpSession session = req.getSession();
		
		ArrayList<Product> list = service.getByMem((String)session.getAttribute("id"));
		
		model.addAttribute("list",list);
		
		return "/product/list";
	}
	
	
}
